<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>AURORA</title>
  
  <subtitle>一蓑烟雨任平生</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wtaufpziv.github.io/"/>
  <updated>2024-06-10T10:09:38.488Z</updated>
  <id>https://wtaufpziv.github.io/</id>
  
  <author>
    <name>AuroraAksnesOs</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Vue复习汇总</title>
    <link href="https://wtaufpziv.github.io/2024/06/02/Vue%E5%A4%8D%E4%B9%A0%E6%B1%87%E6%80%BB/"/>
    <id>https://wtaufpziv.github.io/2024/06/02/Vue%E5%A4%8D%E4%B9%A0%E6%B1%87%E6%80%BB/</id>
    <published>2024-06-01T16:00:00.000Z</published>
    <updated>2024-06-10T10:09:38.488Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;h1 id=&quot;Vue简述&quot;&gt;&lt;a href=&quot;#Vue简述&quot; class=&quot;headerlink&quot; title=&quot;Vue简述&quot;&gt;&lt;/a&gt;Vue简述&lt;/h1&gt;&lt;p&gt;Vue是⼀套⽤于构建⽤户界⾯的渐进式框架，Vue的核⼼只关注视图层&lt;/p&gt;
&lt;h2 id=&quot;声名式框架&quot;&gt;&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面经笔经" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E7%BB%8F%E7%AC%94%E7%BB%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>深入浅出-Webpack学习笔记（三）</title>
    <link href="https://wtaufpziv.github.io/2024/05/25/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-Webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://wtaufpziv.github.io/2024/05/25/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-Webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</id>
    <published>2024-05-25T02:28:45.279Z</published>
    <updated>2024-05-25T04:21:29.360Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;接下来学习如何用 Webpack 去解决实际项目中常见的场景&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>JQ-CSS实现老虎机抽奖效果</title>
    <link href="https://wtaufpziv.github.io/2020/08/07/JQ-CSS%E5%AE%9E%E7%8E%B0%E8%80%81%E8%99%8E%E6%9C%BA%E6%8A%BD%E5%A5%96%E6%95%88%E6%9E%9C/"/>
    <id>https://wtaufpziv.github.io/2020/08/07/JQ-CSS%E5%AE%9E%E7%8E%B0%E8%80%81%E8%99%8E%E6%9C%BA%E6%8A%BD%E5%A5%96%E6%95%88%E6%9E%9C/</id>
    <published>2020-08-06T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.805Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;现在不少app都会有一些抽奖活动，热门的抽奖当属九宫格循环抽奖，而还有一种抽奖形式也是比较常见，比如老虎机的形式&lt;/p&gt;
&lt;h2 id=&quot;预期效果&quot;&gt;&lt;a href=&quot;#预期效果&quot; class=&quot;headerlink&quot; title=&quot;预期效果&quot;&gt;&lt;/a&gt;预期效果&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/images/assets/20200804161721953.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;那么我们就用JQ和CSS实现一下这个效果。&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>深入浅出-Webpack学习笔记（四）——优化·上</title>
    <link href="https://wtaufpziv.github.io/2020/08/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-Webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E4%BC%98%E5%8C%96%C2%B7%E4%B8%8A/"/>
    <id>https://wtaufpziv.github.io/2020/08/03/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-Webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E5%9B%9B%EF%BC%89%E2%80%94%E2%80%94%E4%BC%98%E5%8C%96%C2%B7%E4%B8%8A/</id>
    <published>2020-08-02T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.340Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;了解了webpack的一些基本使用方法，我们就开始需要着手于一些优化点了。 webpack优化可以分为优化开发体验和优化输出质量两部分，那么接下来就深入学习一下webpack的优化。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;优化开发体验&lt;/strong&gt;&lt;br&gt;优化开发体验的目的是为了提升开发时的效率，其中又可以分为以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优化构建速度。在项目庞大时构建耗时可能会变的很长，每次等待构建的耗时加起来也会是个大数目。&lt;/li&gt;
&lt;li&gt;优化使用体验。通过自动化手段完成一些重复的工作，让我们专注于解决问题本身。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;优化输出质量&lt;/strong&gt;&lt;br&gt;优化输出质量的目的是为了给用户呈现体验更好的网页，例如减少首屏加载时间、提升性能流畅度等。 这至关重要，因为在互联网行业竞争日益激烈的今天，这可能关系到你的产品的生死。&lt;/p&gt;
&lt;p&gt;优化输出质量本质是优化构建输出的要发布到线上的代码，分为以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;减少用户能感知到的加载时间，也就是首屏加载时间。&lt;/li&gt;
&lt;li&gt;提升流畅度，也就是提升代码性能。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;优化的关键是找出问题所在，这样才能一针见血， 输出分析 教你如何利用工具快速找出问题所在。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>从Service-Workers认识离线应用</title>
    <link href="https://wtaufpziv.github.io/2020/07/30/%E4%BB%8EService-Workers%E8%AE%A4%E8%AF%86%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/"/>
    <id>https://wtaufpziv.github.io/2020/07/30/%E4%BB%8EService-Workers%E8%AE%A4%E8%AF%86%E7%A6%BB%E7%BA%BF%E5%BA%94%E7%94%A8/</id>
    <published>2020-07-29T16:00:00.000Z</published>
    <updated>2024-05-25T02:28:45.261Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;认识离线应用&quot;&gt;&lt;a href=&quot;#认识离线应用&quot; class=&quot;headerlink&quot; title=&quot;认识离线应用&quot;&gt;&lt;/a&gt;认识离线应用&lt;/h1&gt;&lt;p&gt;你的网页性能优化的再好，如果网络不好那也会导致网页的体验差。 离线应用是指通过离线缓存技术，让资源在第一次被加载后缓存在本地，下次访问它时就直接返回本地的文件，就算没有网络连接。&lt;/p&gt;
&lt;p&gt;离线应用有以下优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在没有网络的情况下也能打开网页。&lt;/li&gt;
&lt;li&gt;由于部分被缓存的资源直接从本地加载，对用户来说可以加速网页加载速度，对网站运营者来说可以减少服务器压力以及传输流量费用。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;离线应用的核心是离线缓存技术，历史上曾先后出现2种离线离线缓存技术，它们分别是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AppCache 又叫 Application Cache，目前已经从 Web 标准中删除，请尽量不要使用它。&lt;/li&gt;
&lt;li&gt;Service Workers 是目前最新的离线缓存技术，是 Web Worker 的一部分。 它通过拦截网络请求实现离线缓存，比 AppCache 更加灵活。它也是构建 PWA 应用的关键技术之一。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Service Workers 相比于 AppCache 来说更加灵活，因为它可以通过 JavaScript 代码去控制缓存的逻辑。 &lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>深入浅出-Webpack学习笔记（二）</title>
    <link href="https://wtaufpziv.github.io/2020/07/30/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-Webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://wtaufpziv.github.io/2020/07/30/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-Webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</id>
    <published>2020-07-29T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.340Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;配置 Webpack 的方式有两种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过一个 JavaScript 文件描述配置，例如使用 webpack.config.js 文件里的配置；&lt;/li&gt;
&lt;li&gt;执行 Webpack 可执行文件时通过命令行参数传入，例如 webpack –devtool source-map。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这两种方式可以相互搭配，例如执行 Webpack 时通过命令 webpack –config webpack-dev.config.js 指定配置文件，再去 webpack-dev.config.js 文件里描述部分配置。&lt;/p&gt;
&lt;p&gt;按照配置方式来划分，可分为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只能通过命令行参数传入的选项，这种最为少见；&lt;/li&gt;
&lt;li&gt;只能通过配置文件配置的选项；&lt;/li&gt;
&lt;li&gt;通过两种方式都可以配置的选项。
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>mac安装webpack时fsevents依赖安装报错</title>
    <link href="https://wtaufpziv.github.io/2020/07/28/mac%E5%AE%89%E8%A3%85webpack%E6%97%B6fsevents%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99/"/>
    <id>https://wtaufpziv.github.io/2020/07/28/mac%E5%AE%89%E8%A3%85webpack%E6%97%B6fsevents%E4%BE%9D%E8%B5%96%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99/</id>
    <published>2020-07-27T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.805Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;安装webpack时fsevents依赖安装报错&quot;&gt;&lt;a href=&quot;#安装webpack时fsevents依赖安装报错&quot; class=&quot;headerlink&quot; title=&quot;安装webpack时fsevents依赖安装报错&quot;&gt;&lt;/a&gt;安装webpack时fsevents依赖安装报错&lt;/h1&gt;&lt;p&gt;mac安装webpack时，会同时安装fsevents，但是在安装时候发生了报错&lt;/p&gt;
&lt;p&gt;由于后来解决了，所以没有当时的报错截图，但是和下面这个大概一致&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>深入浅出-Webpack学习笔记（一）</title>
    <link href="https://wtaufpziv.github.io/2020/07/28/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-Webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://wtaufpziv.github.io/2020/07/28/%E6%B7%B1%E5%85%A5%E6%B5%85%E5%87%BA-Webpack%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</id>
    <published>2020-07-27T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.360Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;webpack的思想&quot;&gt;&lt;a href=&quot;#webpack的思想&quot; class=&quot;headerlink&quot; title=&quot;webpack的思想&quot;&gt;&lt;/a&gt;webpack的思想&lt;/h1&gt;&lt;p&gt;Webpack 是一个打包模块化 JavaScript 的工具，在 Webpack 里一切文件皆模块，通过 Loader 转换文件，通过 Plugin 注入钩子，最后输出由多个模块组合成的文件。Webpack 专注于构建模块化项目。&lt;/p&gt;
&lt;p&gt;其官网的首页图很形象的画出了 Webpack 是什么&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/assets/20200727154553214.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;一切文件：JavaScript、CSS、SCSS、图片、模板，在 Webpack 眼中都是一个个模块，这样的好处是能清晰的描述出各个模块之间的依赖关系，以方便 Webpack 对模块进行组合和打包。 经过 Webpack 的处理，最终会输出浏览器能使用的静态资源。&lt;/p&gt;
&lt;p&gt;Webpack的优点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;专注于处理模块化的项目，能做到开箱即用一步到位；&lt;/li&gt;
&lt;li&gt;通过 Plugin 扩展，完整好用又不失灵活；&lt;/li&gt;
&lt;li&gt;使用场景不仅限于 Web 开发；&lt;/li&gt;
&lt;li&gt;社区庞大活跃，经常引入紧跟时代发展的新特性，能为大多数场景找到已有的开源扩展；&lt;br&gt;良好的开发体验。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/webpack/"/>
    
    
  </entry>
  
  <entry>
    <title>小话前端动画</title>
    <link href="https://wtaufpziv.github.io/2020/07/27/%E5%B0%8F%E8%AF%9D%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB/"/>
    <id>https://wtaufpziv.github.io/2020/07/27/%E5%B0%8F%E8%AF%9D%E5%89%8D%E7%AB%AF%E5%8A%A8%E7%94%BB/</id>
    <published>2020-07-26T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.360Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在如今的web时代，网页中的动画已经成为web交互中必不可少的要素，小到一个按钮的点击，大到一个炫酷的特效，各路神圣大显神通，展示了web动画的无限可能，进而动画也就成了前端开发者不得不认真了解的一个领域。&lt;/p&gt;
&lt;p&gt;就目前来看，前端实现动画就有六种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;css的transition&lt;/li&gt;
&lt;li&gt;css的animation&lt;/li&gt;
&lt;li&gt;javascript利用setTimeout手写&lt;/li&gt;
&lt;li&gt;requestAnimationFrames&lt;/li&gt;
&lt;li&gt;SVG&lt;/li&gt;
&lt;li&gt;Canvas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上六种中，SVG由于CSS3的出现使用得越来越少了，而Canvas又是一个很庞大的领域，作为h5如今力压flash的王牌，canvas需要一定的额外学习成本。因此这篇文章将暂时不探讨这两种方式。&lt;/p&gt;
&lt;p&gt;而剩下的四种方式，习惯上我们更容易想到，用transition和animation做比较，用setTimeout和requestAnimationFrames做比较，因此我们也已这样的角度，分别探究一下这四种方式的各个方面&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="HTML、浏览器综合" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/HTML%E3%80%81%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BB%BC%E5%90%88/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue通过JS动态设置-keyFrame实现列表项不同动画</title>
    <link href="https://wtaufpziv.github.io/2020/07/23/Vue%E9%80%9A%E8%BF%87JS%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE-keyFrame%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E9%A1%B9%E4%B8%8D%E5%90%8C%E5%8A%A8%E7%94%BB/"/>
    <id>https://wtaufpziv.github.io/2020/07/23/Vue%E9%80%9A%E8%BF%87JS%E5%8A%A8%E6%80%81%E8%AE%BE%E7%BD%AE-keyFrame%E5%AE%9E%E7%8E%B0%E5%88%97%E8%A1%A8%E9%A1%B9%E4%B8%8D%E5%90%8C%E5%8A%A8%E7%94%BB/</id>
    <published>2020-07-22T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.744Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;预期效果&quot;&gt;&lt;a href=&quot;#预期效果&quot; class=&quot;headerlink&quot; title=&quot;预期效果&quot;&gt;&lt;/a&gt;预期效果&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/assets/20200723213259494.gif&quot; alt=&quot;&quot;&gt;&lt;br&gt;对于这个效果，可以选择height配合transition实现，但是css3提供了更流畅的animation，我们就用它来实现这个需求吧&lt;/p&gt;
&lt;p&gt;可以看到每一项animation的keyframe都不一样，也就是每一项需要动态使用不同的关键帧。所以主要使用的方法就是动态地往document里插入具有不同关键帧的styleElement，然后在触发动画的地方将animation属性赋给对应的元素。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>由链式调用再探函数柯里化</title>
    <link href="https://wtaufpziv.github.io/2020/07/22/%E7%94%B1%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E5%86%8D%E6%8E%A2%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/"/>
    <id>https://wtaufpziv.github.io/2020/07/22/%E7%94%B1%E9%93%BE%E5%BC%8F%E8%B0%83%E7%94%A8%E5%86%8D%E6%8E%A2%E5%87%BD%E6%95%B0%E6%9F%AF%E9%87%8C%E5%8C%96/</id>
    <published>2020-07-21T16:00:00.000Z</published>
    <updated>2024-05-25T02:28:45.281Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;函数柯里化并不是JS的一个特性，而是一种处理函数的模式，我第一次接触这个概念还是在准备面试复习JS的时候，然而由于之前对函数柯里化不熟悉，复习也就没有完全理解，导致面试时候关于函数柯里化的题只要稍微有变动，就能卡得我一脸懵逼。“一知半解”可是面试中的大忌，于是我打算——再探函数柯里化。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>IntersectionObserver与图片懒加载</title>
    <link href="https://wtaufpziv.github.io/2020/06/30/IntersectionObserver%E4%B8%8E%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/"/>
    <id>https://wtaufpziv.github.io/2020/06/30/IntersectionObserver%E4%B8%8E%E5%9B%BE%E7%89%87%E6%87%92%E5%8A%A0%E8%BD%BD/</id>
    <published>2020-06-29T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.812Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;文章参考：&lt;a href=&quot;https://zhuanlan.zhihu.com/p/94426820&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;IntersectionObserver 和图片懒加载&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;关于-IntersectionObserver&quot;&gt;&lt;a href=&quot;#关于-IntersectionObserver&quot; class=&quot;headerlink&quot; title=&quot;关于 IntersectionObserver&quot;&gt;&lt;/a&gt;关于 IntersectionObserver&lt;/h1&gt;&lt;p&gt;IntersectionObserver 这个 API 平常可能听得比较少，caniuse 兼容性报告目前支持率是 90.12%，还不推荐用于大众化的场景中，但是它的能力和性能非常的好。&lt;br&gt;&lt;img src=&quot;/images/assets/20200629190154149.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;IntersectionObserver 接口 (从属于Intersection Observer API) 提供了一种异步观察目标元素与其祖先元素或顶级文档视窗(viewport)交叉状态的方法。祖先元素与视窗(viewport)被称为根(root)。由于可见（visible）的本质是，目标元素与视口产生一个交叉区，所以这个 API 叫做”&lt;strong&gt;交叉观察器&lt;/strong&gt;“。&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="JavaScript" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>typescript学习笔记</title>
    <link href="https://wtaufpziv.github.io/2020/06/27/typescript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://wtaufpziv.github.io/2020/06/27/typescript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2020-06-26T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.804Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;TypeScript 是 JavaScript 的类型的超集，它可以编译成纯 JavaScript。编译出来的 JavaScript 可以运行在任何浏览器上。TypeScript 编译工具可以运行在任何服务器和任何系统上。&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="typescript" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/typescript/"/>
    
    
  </entry>
  
  <entry>
    <title>vue修改端口号和开启https</title>
    <link href="https://wtaufpziv.github.io/2020/06/15/vue%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%92%8C%E5%BC%80%E5%90%AFhttps/"/>
    <id>https://wtaufpziv.github.io/2020/06/15/vue%E4%BF%AE%E6%94%B9%E7%AB%AF%E5%8F%A3%E5%8F%B7%E5%92%8C%E5%BC%80%E5%90%AFhttps/</id>
    <published>2020-06-14T16:00:00.000Z</published>
    <updated>2024-05-25T02:28:45.259Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;vue开发环境修改本地启动的端口号&quot;&gt;&lt;a href=&quot;#vue开发环境修改本地启动的端口号&quot; class=&quot;headerlink&quot; title=&quot;vue开发环境修改本地启动的端口号&quot;&gt;&lt;/a&gt;vue开发环境修改本地启动的端口号&lt;/h1&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="Vue" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-乘积最大子数组</title>
    <link href="https://wtaufpziv.github.io/2020/06/10/leetcode-%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/"/>
    <id>https://wtaufpziv.github.io/2020/06/10/leetcode-%E4%B9%98%E7%A7%AF%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E7%BB%84/</id>
    <published>2020-06-09T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.805Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;乘积最大子数组（难度：中等）&quot;&gt;&lt;a href=&quot;#乘积最大子数组（难度：中等）&quot; class=&quot;headerlink&quot; title=&quot;乘积最大子数组（难度：中等）&quot;&gt;&lt;/a&gt;乘积最大子数组（难度：中等）&lt;/h1&gt;&lt;p&gt;给你一个整数数组 nums ，请你找出数组中乘积最大的连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。&lt;/p&gt;
&lt;p&gt;示例1：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [2,3,-2,4]&lt;br&gt;输出: 6&lt;br&gt;解释: 子数组 [2,3] 有最大乘积 6。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例2：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;输入: [-2,0,-1]&lt;br&gt;输出: 0&lt;br&gt;解释: 结果不能为 2, 因为 [-2,-1] 不是子数组。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="计算机通识" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/"/>
    
      <category term="数据结构与算法" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>git版本管理复习</title>
    <link href="https://wtaufpziv.github.io/2020/06/07/git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%A4%8D%E4%B9%A0/"/>
    <id>https://wtaufpziv.github.io/2020/06/07/git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%A4%8D%E4%B9%A0/</id>
    <published>2020-06-06T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:30.275Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;git版本管理工具复习&lt;br&gt;资料来源：&lt;a href=&quot;https://learngitbranching.js.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Learn Git Branching&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;git仓库初始化&quot;&gt;&lt;a href=&quot;#git仓库初始化&quot; class=&quot;headerlink&quot; title=&quot;git仓库初始化&quot;&gt;&lt;/a&gt;git仓库初始化&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git init&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们初始化完成仓库之后就可以往对应的目录添加文件&lt;/p&gt;
&lt;p&gt;假设现在我们编写一个了readme.txt文件，那么我们要使用git管理控制这个文件，还需要将这个文件添加到仓库，而不是仅仅将它放在仓库所在的文件夹&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;git add readme.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：git add不仅可以添加单个文件，还可以添加文件夹，这样文件夹中任意文件的变化都可以由git进行监控与管理&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="计算机通识" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/"/>
    
      <category term="git版本管理工具" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/git%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7/"/>
    
    
  </entry>
  
  <entry>
    <title>Navicat-for-mac破解</title>
    <link href="https://wtaufpziv.github.io/2020/06/06/Navicat-for-mac%E7%A0%B4%E8%A7%A3/"/>
    <id>https://wtaufpziv.github.io/2020/06/06/Navicat-for-mac%E7%A0%B4%E8%A7%A3/</id>
    <published>2020-06-05T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.805Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Navicat-Premium-for-Mac&quot;&gt;&lt;a href=&quot;#Navicat-Premium-for-Mac&quot; class=&quot;headerlink&quot; title=&quot;Navicat Premium for Mac&quot;&gt;&lt;/a&gt;Navicat Premium for Mac&lt;/h1&gt;&lt;p&gt;首先贴上之后需要使用的公钥和私钥：&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="杂项" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E6%9D%82%E9%A1%B9/"/>
    
      <category term="软件安装与破解系列" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E6%9D%82%E9%A1%B9/%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E7%A0%B4%E8%A7%A3%E7%B3%BB%E5%88%97/"/>
    
    
  </entry>
  
  <entry>
    <title>软件项目策划与管理知识点汇总</title>
    <link href="https://wtaufpziv.github.io/2020/05/26/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AD%96%E5%88%92%E4%B8%8E%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/"/>
    <id>https://wtaufpziv.github.io/2020/05/26/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AD%96%E5%88%92%E4%B8%8E%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86%E7%82%B9%E6%B1%87%E6%80%BB/</id>
    <published>2020-05-25T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.274Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;软件项目策划与管知识点汇总&lt;br&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="计算机通识" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/"/>
    
      <category term="软件项目策划与管理" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/%E8%BD%AF%E4%BB%B6%E9%A1%B9%E7%9B%AE%E7%AD%96%E5%88%92%E4%B8%8E%E7%AE%A1%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>leetcode-验证二叉搜索树</title>
    <link href="https://wtaufpziv.github.io/2020/05/05/leetcode-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    <id>https://wtaufpziv.github.io/2020/05/05/leetcode-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</id>
    <published>2020-05-04T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:29.805Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;验证二叉搜索树（难度：中等）&quot;&gt;&lt;a href=&quot;#验证二叉搜索树（难度：中等）&quot; class=&quot;headerlink&quot; title=&quot;验证二叉搜索树（难度：中等）&quot;&gt;&lt;/a&gt;验证二叉搜索树（难度：中等）&lt;/h1&gt;&lt;p&gt;给定一个二叉树，判断其是否是一个有效的二叉搜索树。&lt;/p&gt;
&lt;p&gt;假设一个二叉搜索树具有如下特征：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;节点的左子树只包含小于当前节点的数。&lt;/li&gt;
&lt;li&gt;节点的右子树只包含大于当前节点的数。&lt;/li&gt;
&lt;li&gt;所有左子树和右子树自身必须也是二叉搜索树。&lt;br&gt;&lt;img src=&quot;/images/assets/20200505221528767.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;这道题首先结合二叉树的普遍解题步骤可以立刻想到借用递归，从根节点开始向下遍历，过程中维护一个区间【a，b】，那么对于当前节点的左子树，要满足所有节点的值在【a，当前节点值】之间，当前节点的右子树，要满足所有节点的值在【当前节点值，b】之间。在遍历过程中不断更新这个区间即可&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="计算机通识" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/"/>
    
      <category term="数据结构与算法" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E9%80%9A%E8%AF%86/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>2020春招面经</title>
    <link href="https://wtaufpziv.github.io/2020/04/30/2020%E6%98%A5%E6%8B%9B%E9%9D%A2%E7%BB%8F/"/>
    <id>https://wtaufpziv.github.io/2020/04/30/2020%E6%98%A5%E6%8B%9B%E9%9D%A2%E7%BB%8F/</id>
    <published>2020-04-29T16:00:00.000Z</published>
    <updated>2024-05-25T04:21:30.308Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;在写这篇博客的前一天，我终于收到了整个春招第一份（也许是唯一一份offer），回顾整个春招的辛酸历程，用一篇博客简单记录一下吧&lt;/p&gt;
&lt;p&gt;这一次的春招可以说是自己第一次以应聘者的身份对职场进行一次小小的摸索，大大小小的公司都投递了一些，投递的公司职位和时间如下：&lt;/p&gt;
    
    </summary>
    
    
      <category term="技术" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="前端" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="面经笔经" scheme="https://wtaufpziv.github.io/categories/%E6%8A%80%E6%9C%AF/%E5%89%8D%E7%AB%AF/%E9%9D%A2%E7%BB%8F%E7%AC%94%E7%BB%8F/"/>
    
    
  </entry>
  
</feed>
